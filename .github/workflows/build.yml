# 工作流名称
name: Tianwu Build

# 触发器：使用手动触发，并定义输入参数 region
on:
  workflow_dispatch:

# 定义一个任务（Job）
jobs:
  build:
    # 运行此任务的操作系统环境
    runs-on: ubuntu-latest
    # 授予任务对仓库内容的写入权限，以便创建和上传 Release 资产
    permissions:
      contents: write

    # 任务步骤
    steps:
      # 步骤1：检出仓库代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 步骤2：设置 Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v3.3.0
        with:
          java-version: "17"
          distribution: "adopt"

      # 步骤3：设置 Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # 步骤4：安装 build-tools
      - name: Install build-tools
        run: |
          yes | sdkmanager --install "build-tools;32.0.0"

      # 步骤5：构建 APK 文件
      - name: Build Tianwu APK
        run: ./build_tianwu_beta.sh

      # 步骤6：对 APK 进行 zipalign 和签名
      - name: Sign Android release
        run: ./zipalign_sign.sh

      # 步骤7：分卷压缩 APK
      - name: Create split archives
        run: |  
          # 删除之前可能遗留的分卷压缩包文件
          rm -f "Azurlane Tianwu.7z"*
          
          # 查找生成的 APK 文件，使用 find 命令可以确保即使文件名有变化也能找到
          APK_FILE=$(find build -name "*.apk" -print -quit)
          
          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK file found in build directory!"
            exit 1
          fi
          
          echo "Creating split archives for: $APK_FILE"

          7z a -v800M "Azurlane Tianwu.7z" "$APK_FILE"
          
          echo "Generated split files:"
          ls -lh "Azurlane Tianwu.7z"*

      # 步骤8：创建 Release 并上传所有分卷文件
      - name: Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # 使用 `tag` 参数定义 Release 的标签
          tag: "Bilibili-v9.6.11 test"
          # 使用 `name` 参数定义 Release 的名称
          name: "Azurlane Tianwu Bilibili Release v9.6.11 test"
          # `artifacts` 参数支持通配符，可以直接匹配所有分卷文件
          artifacts: "Azurlane Tianwu Bilibili.7z.*"
          # 允许更新已存在的 Release
          allowUpdates: true