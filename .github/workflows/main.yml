# 工作流名称
name: Perseus Build

# 触发器：使用手动触发，并定义输入参数 region
on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Select Region'
        required: true
        type: choice
        options:
          - 'EN'
          - 'JP'
          - 'KR'
          - 'TW'
          - 'CN'

# 定义一个任务（Job）
jobs:
  build:
    # 运行此任务的操作系统环境
    runs-on: ubuntu-latest
    # 授予任务对仓库内容的写入权限，以便创建和上传 Release 资产
    permissions:
      contents: write

    # 任务步骤
    steps:
      # 步骤1：检出仓库代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 步骤2：设置 Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v3.3.0
        with:
          java-version: "17"
          distribution: "adopt"

      # 步骤3：设置 Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # 步骤4：安装 build-tools
      - name: Install build-tools
        run: |
          yes | sdkmanager --install "build-tools;32.0.0"

      # 步骤5：确定 Bundle ID
      - name: Determine Bundle ID
        id: bundle_id
        run: |
          case "${{ github.event.inputs.region }}" in
          "EN")
            echo "BUNDLE_ID=com.YoStarEN.AzurLane" >> $GITHUB_ENV
            ;;
          "JP")
            echo "BUNDLE_ID=com.YoStarJP.AzurLane" >> $GITHUB_ENV
            ;;
          "KR")
            echo "BUNDLE_ID=kr.txwy.and.blhx" >> $GITHUB_ENV
            ;;
          "TW")
            echo "BUNDLE_ID=com.hkmanjuu.azurlane.gp" >> $GITHUB_ENV
            ;;
          "CN")
            echo "BUNDLE_ID=com.bilibili.azurlane" >> $GITHUB_ENV
            ;;
          esac
        shell: bash

      # 步骤6：构建 APK 文件
      - name: Build Perseus APK
        run: ./patch_perseus.sh ${{ env.BUNDLE_ID }}

      # 步骤7：对 APK 进行 zipalign 和签名
      - name: Zipalign and Sign Android release
        run: ./zipalign_sign.sh

      # 步骤8：分卷压缩 APK
      - name: Create split archives
        run: |
          # 设置分卷大小为 800MB
          SPLIT_SIZE=800m
          
          # 查找生成的 APK 文件，使用 find 命令可以确保即使文件名有变化也能找到
          APK_FILE=$(find build -name "*.apk" -print -quit)
          
          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK file found in build directory!"
            exit 1
          fi
          
          # 定义输出压缩包的前缀
          ARCHIVE_PREFIX="Azurlane Perseus"
          
          echo "Creating split archives for: $APK_FILE"
          
          # 使用 7z 创建分卷压缩包，并指定为 '仅存储' 模式
          # -a: 添加文件
          # -tzip: 格式为 zip
          # -mx=0: 压缩级别为 0 (仅存储，无压缩)
          # -v${SPLIT_SIZE}: 分卷大小
          # -y: 对所有提示回答 Yes
          7z a -tzip -mx=0 -v${SPLIT_SIZE} "${ARCHIVE_PREFIX}.zip" "$APK_FILE"
          
          echo "Generated split files:"
          ls -lh ${ARCHIVE_PREFIX}.zip.*

      # 步骤9：创建 Release 并上传所有分卷文件
      - name: Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # 使用 `tag` 参数定义 Release 的标签
          tag: "${{ github.event.inputs.region }}-v${{ env.PERSEUS_VERSION }}"
          # 使用 `name` 参数定义 Release 的名称
          name: "Azurlane Perseus ${{ github.event.inputs.region }} Release v${{ env.PERSEUS_VERSION }}"
          # `artifacts` 参数支持通配符，可以直接匹配所有分卷文件
          artifacts: "Azurlane Perseus.zip.*"
          # 允许更新已存在的 Release
          allowUpdates: true